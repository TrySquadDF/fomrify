package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"context"

	gqlmodel "github.com/TrySquadDF/formify/api-gql/internal/delivery/gql/graph/model"
	gomodel "github.com/TrySquadDF/formify/lib/gomodels"
)


func FormsToGraphQL(forms []gomodel.Form) []*gqlmodel.Form {
	result := make([]*gqlmodel.Form, len(forms))
	for i, form := range forms {
		result[i] = FormToGraphQL(&form)
	}
	return result
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*gqlmodel.User, error) {
	userID, err := r.deps.Sessions.GetUserIDFromContext(ctx)
	if err != nil {
		return nil, err
	}

	var user gomodel.Users
	if err := r.deps.Gorm.Preload("Forms.Questions.Options").First(&user, "id = ?", userID).Error; err != nil {
		return nil, err
	}
	return &gqlmodel.User{
		ID:          user.ID,
		Email:       user.Email,
		DisplayName: user.DisplayName,
		GoogleID:    user.GoogleID,
		Picture:     user.Picture,
		IsBanned:    user.IsBanned,
		Forms:       FormsToGraphQL(user.Forms),
	}, nil
}
